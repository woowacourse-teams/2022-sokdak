name: backend

on:
  push:
    branches:
      - main
      - dev
      - test/sonarqube
    paths: 'backend/**'
  pull_request:
    branches:
      - main
      - dev
      - test/sonarqube
    paths: 'backend/**'

defaults:
  run:
    working-directory: backend/sokdak

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 리포지토리를 가져옵니다
        uses: actions/checkout@v3

      - name: JDK 11을 설치합니다
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Setup timezone
        uses: zcong1993/setup-timezone@master
        with:
          timezone: Asia/Seoul

      - name: Gradle 명령 실행을 위한 권한을 부여합니다.
        run: chmod +x gradlew

      - name: Gradle build를 수행합니다
        run: ./gradlew build

      - name: 테스트 결과를 PR에 코멘트로 등록합니다
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: '**/build/test-results/test/TEST-*.xml'

      - name: 테스트 실패 시, 실패한 코드 라인에 Check 코멘트를 등록합니다
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'
          token: ${{ github.token }}

  analysis:
    runs-on: ubuntu-latest
    env:
      SONARQUBE_PROJECT_KEY: sokdak
      SONARQUBE_URL: ${{ secrets.SONARQUBE_URL }}
      SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
      SONARQUBE_AUTH_URL: ${{ secrets.SONARQUBE_AUTH_URL }}
      PR_NUMBER: ${{ github.event.pull_request.number }}
      PR_BRANCH: ${{ github.event.pull_request.branch }}
    steps:
      - name: 리포지토리를 가져옵니다
        uses: actions/checkout@v3

      - name: Gradle 명령 실행을 위한 권한을 부여합니다.
        run: chmod +x gradlew

      - name: Setup timezone
        uses: zcong1993/setup-timezone@master
        with:
          timezone: Asia/Seoul

      # Gralde 의 Scanner 발동, 위의 env 에서 선언한 환경변수와 함께 발동
      - name: Sonaqube Analysis
        run: ./gradlew test sonarqube
          -Dsonar.host.url=${{ env.SONARQUBE_URL }}
          -Dsonar.projectKey=${{ env.SONARQUBE_PROJECT_KEY }}
          -Dsonar.projectName=${{ env.SONARQUBE_PROJECT_KEY }}-${{ env.PR_NUMBER }}
          -Dsonar.login=${{ env.SONARQUBE_TOKEN }}

      - name: get analysis results
        id: analysis_results
        run: |
          RESPONSE=$(curl -X GET -G '${{ env.SONARQUBE_AUTH_URL }}/api/measures/search' \
          -d projectKeys=sokdak \
          -d metricKeys=bugs,vulnerabilities,security_hotspots,code_smells,coverage,tests,test_success_density,test_failures,test_errors,skipped_tests,duplicated_lines_density,duplicated_files,duplicated_blocks \
          | jq '.measures')
          echo "$RESPONSE" | jq -c '.[] | .' | while read -r data;
          do
            METRIC=$(echo $data | jq -r '.metric')
            VALUE=$(echo $data | jq -r '.value')
            BEST_VALUE=$(echo $data | jq -r '.bestValue')
            echo "::set-output name=${METRIC}_value::${VALUE}"
            if [ $BEST_VALUE == true ]; then
              echo "::set-output name=${METRIC}_best_value::✅"
            else
              echo "::set-output name=${METRIC}_best_value::❌"
            fi
          done

      # PR 에 Comment 를 달아주는 스크립트 실행
      - name: Comment Sonarqube URL
        uses: actions/github-script@v4
        with:
          script: |
            const { SONARQUBE_PROJECT_KEY, SONARQUBE_URL, PR_NUMBER } = process.env
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚧 Analysis Results
            ${ SONARQUBE_PROJECT_KEY }-${ PR_NUMBER }

            Bugs :    ${{ steps.analysis_results.outputs.bugs_value }}    ${{ steps.analysis_results.outputs.bugs_best_value }}
            Vulnerabilities :    ${{ steps.analysis_results.outputs.vulnerabilities_value }}    ${{ steps.analysis_results.outputs.vulnerabilities_best_value }}
            Security Hotspots :    ${{ steps.analysis_results.outputs.security_hotspots_value }}    ${{ steps.analysis_results.outputs.security_hotspots_best_value }}
            Code Smells :    ${{ steps.analysis_results.outputs.code_smells_value }}    ${{ steps.analysis_results.outputs.code_smells_best_value }}
            Coverage :    ${{ steps.analysis_results.outputs.coverage_value }}    ${{ steps.analysis_results.outputs.coverage_best_value }}
            Tests :    ${{ steps.analysis_results.outputs.tests_value }}    ${{ steps.analysis_results.outputs.tests_best_value }}
            Test Success Density :    ${{ steps.analysis_results.outputs.test_success_density_value }}    ${{ steps.analysis_results.outputs.test_success_density_best_value }}
            Test Failures :    ${{ steps.analysis_results.outputs.test_failures_value }}    ${{ steps.analysis_results.outputs.test_failures_best_value }}
            Duplicated Lines Density :    ${{ steps.analysis_results.outputs.duplicated_lines_density_value }}    ${{ steps.analysis_results.outputs.duplicated_lines_density_best_value }}

            [분석 결과 확인하기](${SONARQUBE_URL})`
            })
